[2025-08-16 21:30:41,107] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: 1_load_initial_data.create_and_populate_obt_orders manual__2025-08-16T21:25:27.221750+00:00 [queued]>
[2025-08-16 21:30:41,117] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: 1_load_initial_data.create_and_populate_obt_orders manual__2025-08-16T21:25:27.221750+00:00 [queued]>
[2025-08-16 21:30:41,119] {taskinstance.py:1356} INFO - 
--------------------------------------------------------------------------------
[2025-08-16 21:30:41,128] {taskinstance.py:1357} INFO - Starting attempt 2 of 2
[2025-08-16 21:30:41,129] {taskinstance.py:1358} INFO - 
--------------------------------------------------------------------------------
[2025-08-16 21:30:41,141] {taskinstance.py:1377} INFO - Executing <Task(PostgresOperator): create_and_populate_obt_orders> on 2025-08-16 21:25:27.221750+00:00
[2025-08-16 21:30:41,147] {standard_task_runner.py:52} INFO - Started process 401 to run task
[2025-08-16 21:30:41,153] {standard_task_runner.py:79} INFO - Running: ['airflow', 'tasks', 'run', '1_load_initial_data', 'create_and_populate_obt_orders', 'manual__2025-08-16T21:25:27.221750+00:00', '--job-id', '20', '--raw', '--subdir', 'DAGS_FOLDER/initialise_data.py', '--cfg-path', '/tmp/tmpztgqulwe', '--error-file', '/tmp/tmpe9qwtvbl']
[2025-08-16 21:30:41,156] {standard_task_runner.py:80} INFO - Job 20: Subtask create_and_populate_obt_orders
[2025-08-16 21:30:41,249] {task_command.py:369} INFO - Running <TaskInstance: 1_load_initial_data.create_and_populate_obt_orders manual__2025-08-16T21:25:27.221750+00:00 [running]> on host 6a6e6aafe640
[2025-08-16 21:30:41,336] {taskinstance.py:1569} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=airflow
AIRFLOW_CTX_DAG_ID=1_load_initial_data
AIRFLOW_CTX_TASK_ID=create_and_populate_obt_orders
AIRFLOW_CTX_EXECUTION_DATE=2025-08-16T21:25:27.221750+00:00
AIRFLOW_CTX_TRY_NUMBER=2
AIRFLOW_CTX_DAG_RUN_ID=manual__2025-08-16T21:25:27.221750+00:00
[2025-08-16 21:30:41,339] {sql.py:262} INFO - Executing: CREATE TABLE IF NOT EXISTS dbt_analytics.obt_orders (
    order_id INT PRIMARY KEY,
    order_date DATE,

    delivery_date DATE,
    delivery_day_of_week VARCHAR(16),
    delivery_month VARCHAR(16),
    delivery_quarter INT,
    
    customer_id INT,
    customer_name VARCHAR(128),
    email_address VARCHAR(255),
    business_type_id INT,
    business_type_name VARCHAR(64),
    is_key_account BOOLEAN,
    customer_archived BOOLEAN,

    site_code CHAR(3),
    city_name VARCHAR(128),
    country_name VARCHAR(128),
    continent CHAR(2),

    order_status VARCHAR(128),
    total DECIMAL(12,2),
    total_shipping DECIMAL(12,2),
    currency_ars DECIMAL(8,2),
    currency_mxn DECIMAL(8,2),
    currency_cop DECIMAL(8,2),
    currency_brl DECIMAL(8,2),

    tracking_code VARCHAR(64),
    gmv_enabled BOOLEAN,
    order_number VARCHAR(128),
    shipping_by_tracking DECIMAL(12,2),

    latitude FLOAT,
    longitude FLOAT
);

INSERT INTO dbt_analytics.obt_orders (
    order_id, order_date, delivery_date, delivery_day_of_week, delivery_month, delivery_quarter,
    customer_id, customer_name, email_address, business_type_id, business_type_name,
    is_key_account, customer_archived,
    site_code, city_name, country_name, continent,
    order_status, total, total_shipping, currency_ars, currency_mxn, currency_cop, currency_brl,
    tracking_code, gmv_enabled, order_number, shipping_by_tracking,
    latitude, longitude
)
SELECT
    o.order_id,
    o.submitted_date::date AS order_date,

    o.delivery_date,
    CASE EXTRACT(DOW FROM o.delivery_date)
        WHEN 0 THEN 'Domingo'
        WHEN 1 THEN 'Lunes'
        WHEN 2 THEN 'Martes'
        WHEN 3 THEN 'Miércoles'
        WHEN 4 THEN 'Jueves'
        WHEN 5 THEN 'Viernes'
        WHEN 6 THEN 'Sábado'
    END AS delivery_day_of_week,
    CASE EXTRACT(MONTH FROM o.delivery_date)
        WHEN 1 THEN 'Enero'
        WHEN 2 THEN 'Febrero'
        WHEN 3 THEN 'Marzo'
        WHEN 4 THEN 'Abril'
        WHEN 5 THEN 'Mayo'
        WHEN 6 THEN 'Junio'
        WHEN 7 THEN 'Julio'
        WHEN 8 THEN 'Agosto'
        WHEN 9 THEN 'Septiembre'
        WHEN 10 THEN 'Octubre'
        WHEN 11 THEN 'Noviembre'
        WHEN 12 THEN 'Diciembre'
    END AS delivery_month,
    EXTRACT(QUARTER FROM o.delivery_date) AS delivery_quarter,

    c.customer_id,
    c.name,
    c.email_address,
    c.business_type_id,
    bt.initcap AS business_type_name,
    c.is_key_account,
    c.archived,

    LEFT(o.site_code, 3),
    sc.city_name,
    sc.country_name,
    sc.continent,

    o.order_status,
    o.total,
    o.total_shipping,
    cc.ars,
    cc.mxn,
    cc.cop,
    cc.brl,

    o.tracking_code,
    o.gmv_enabled,
    o.order_number,
    o.shipping_by_tracking,
    o.latitude,
    o.longitude
FROM dbt_raw_data.orders o
LEFT JOIN dbt_raw_data.customers c ON o.customer_id = c.customer_id
LEFT JOIN dbt_raw_data.business_types bt ON c.business_type_id = bt.business_type_id
LEFT JOIN dbt_raw_data.site_codes sc ON LEFT(o.site_code, 3) = sc.site_code
LEFT JOIN dbt_raw_data.currency_codes cc ON DATE(o.created_date) = cc.date_currency
WHERE o.order_status = 'SUBMITTED'
and o.gmv_enabled is true
ON CONFLICT (order_id) DO NOTHING;
[2025-08-16 21:30:41,356] {base.py:68} INFO - Using connection ID 'dbt_postgres_instance_raw_data' for task execution.
[2025-08-16 21:30:41,393] {logging_mixin.py:115} WARNING - /usr/local/lib/python3.8/site-packages/airflow/models/connection.py:339 DeprecationWarning: The "schema" arg has been renamed to "database" as it contained the database name.Please use "database" to set the database name.
[2025-08-16 21:30:41,404] {base.py:68} INFO - Using connection ID 'dbt_postgres_instance_raw_data' for task execution.
[2025-08-16 21:30:41,419] {sql.py:375} INFO - Running statement: CREATE TABLE IF NOT EXISTS dbt_analytics.obt_orders (
    order_id INT PRIMARY KEY,
    order_date DATE,

    delivery_date DATE,
    delivery_day_of_week VARCHAR(16),
    delivery_month VARCHAR(16),
    delivery_quarter INT,
    
    customer_id INT,
    customer_name VARCHAR(128),
    email_address VARCHAR(255),
    business_type_id INT,
    business_type_name VARCHAR(64),
    is_key_account BOOLEAN,
    customer_archived BOOLEAN,

    site_code CHAR(3),
    city_name VARCHAR(128),
    country_name VARCHAR(128),
    continent CHAR(2),

    order_status VARCHAR(128),
    total DECIMAL(12,2),
    total_shipping DECIMAL(12,2),
    currency_ars DECIMAL(8,2),
    currency_mxn DECIMAL(8,2),
    currency_cop DECIMAL(8,2),
    currency_brl DECIMAL(8,2),

    tracking_code VARCHAR(64),
    gmv_enabled BOOLEAN,
    order_number VARCHAR(128),
    shipping_by_tracking DECIMAL(12,2),

    latitude FLOAT,
    longitude FLOAT
);

INSERT INTO dbt_analytics.obt_orders (
    order_id, order_date, delivery_date, delivery_day_of_week, delivery_month, delivery_quarter,
    customer_id, customer_name, email_address, business_type_id, business_type_name,
    is_key_account, customer_archived,
    site_code, city_name, country_name, continent,
    order_status, total, total_shipping, currency_ars, currency_mxn, currency_cop, currency_brl,
    tracking_code, gmv_enabled, order_number, shipping_by_tracking,
    latitude, longitude
)
SELECT
    o.order_id,
    o.submitted_date::date AS order_date,

    o.delivery_date,
    CASE EXTRACT(DOW FROM o.delivery_date)
        WHEN 0 THEN 'Domingo'
        WHEN 1 THEN 'Lunes'
        WHEN 2 THEN 'Martes'
        WHEN 3 THEN 'Miércoles'
        WHEN 4 THEN 'Jueves'
        WHEN 5 THEN 'Viernes'
        WHEN 6 THEN 'Sábado'
    END AS delivery_day_of_week,
    CASE EXTRACT(MONTH FROM o.delivery_date)
        WHEN 1 THEN 'Enero'
        WHEN 2 THEN 'Febrero'
        WHEN 3 THEN 'Marzo'
        WHEN 4 THEN 'Abril'
        WHEN 5 THEN 'Mayo'
        WHEN 6 THEN 'Junio'
        WHEN 7 THEN 'Julio'
        WHEN 8 THEN 'Agosto'
        WHEN 9 THEN 'Septiembre'
        WHEN 10 THEN 'Octubre'
        WHEN 11 THEN 'Noviembre'
        WHEN 12 THEN 'Diciembre'
    END AS delivery_month,
    EXTRACT(QUARTER FROM o.delivery_date) AS delivery_quarter,

    c.customer_id,
    c.name,
    c.email_address,
    c.business_type_id,
    bt.initcap AS business_type_name,
    c.is_key_account,
    c.archived,

    LEFT(o.site_code, 3),
    sc.city_name,
    sc.country_name,
    sc.continent,

    o.order_status,
    o.total,
    o.total_shipping,
    cc.ars,
    cc.mxn,
    cc.cop,
    cc.brl,

    o.tracking_code,
    o.gmv_enabled,
    o.order_number,
    o.shipping_by_tracking,
    o.latitude,
    o.longitude
FROM dbt_raw_data.orders o
LEFT JOIN dbt_raw_data.customers c ON o.customer_id = c.customer_id
LEFT JOIN dbt_raw_data.business_types bt ON c.business_type_id = bt.business_type_id
LEFT JOIN dbt_raw_data.site_codes sc ON LEFT(o.site_code, 3) = sc.site_code
LEFT JOIN dbt_raw_data.currency_codes cc ON DATE(o.created_date) = cc.date_currency
WHERE o.order_status = 'SUBMITTED'
and o.gmv_enabled is true
ON CONFLICT (order_id) DO NOTHING;, parameters: None
[2025-08-16 21:30:48,188] {sql.py:384} INFO - Rows affected: 258895
[2025-08-16 21:30:48,271] {taskinstance.py:1395} INFO - Marking task as SUCCESS. dag_id=1_load_initial_data, task_id=create_and_populate_obt_orders, execution_date=20250816T212527, start_date=20250816T213041, end_date=20250816T213048
[2025-08-16 21:30:48,468] {local_task_job.py:156} INFO - Task exited with return code 0
[2025-08-16 21:30:48,584] {local_task_job.py:273} INFO - 0 downstream tasks scheduled from follow-on schedule check
